// source: proto/qiaoqiaohua.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Model', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Model.displayName = 'proto.Model';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Model.prototype.toObject = function(opt_includeInstance) {
  return proto.Model.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Model} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Model.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    textcontent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mediatype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mediacontent: msg.getMediacontent_asB64(),
    groupid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 8, ""),
    receiver: jspb.Message.getFieldWithDefault(msg, 9, ""),
    token: jspb.Message.getFieldWithDefault(msg, 10, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sign: jspb.Message.getFieldWithDefault(msg, 12, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    clientversion: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Model}
 */
proto.Model.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Model;
  return proto.Model.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Model}
 */
proto.Model.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgtype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextcontent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMediatype(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMediacontent(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClienttype(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Model} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Model.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMsgtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTextcontent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMediatype();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMediacontent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSign();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getClienttype();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional uint32 cmd = 1;
 * @return {number}
 */
proto.Model.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setCmd = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 msgType = 2;
 * @return {number}
 */
proto.Model.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.Model.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string textContent = 4;
 * @return {string}
 */
proto.Model.prototype.getTextcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setTextcontent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 mediaType = 5;
 * @return {number}
 */
proto.Model.prototype.getMediatype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setMediatype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes mediaContent = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Model.prototype.getMediacontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes mediaContent = 6;
 * This is a type-conversion wrapper around `getMediacontent()`
 * @return {string}
 */
proto.Model.prototype.getMediacontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMediacontent()));
};


/**
 * optional bytes mediaContent = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMediacontent()`
 * @return {!Uint8Array}
 */
proto.Model.prototype.getMediacontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMediacontent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setMediacontent = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string groupId = 7;
 * @return {string}
 */
proto.Model.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sender = 8;
 * @return {string}
 */
proto.Model.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string receiver = 9;
 * @return {string}
 */
proto.Model.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string token = 10;
 * @return {string}
 */
proto.Model.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string appKey = 11;
 * @return {string}
 */
proto.Model.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setAppkey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string sign = 12;
 * @return {string}
 */
proto.Model.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setSign = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 clientType = 13;
 * @return {number}
 */
proto.Model.prototype.getClienttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setClienttype = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string clientVersion = 14;
 * @return {string}
 */
proto.Model.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Model} returns this
 */
proto.Model.prototype.setClientversion = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


goog.object.extend(exports, proto);
